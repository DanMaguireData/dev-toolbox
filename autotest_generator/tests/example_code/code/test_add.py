# -*- coding: utf-8 -*-
#
# THIS FILE IS AUTOGENERATED. DO NOT EDIT IT MANUALLY.
#
# To regenerate this file, run the appropriate script.
#
# Any changes made directly to this file will be overwritten.
#

# flake8: noqa
# ruff: noqa
# pylint: skip-file
# mypy: ignore-errors
# isort: skip_file

# fmt: off
# The above line is for 'black' to skip formatting this file.
# You must run black with the --safe flag for this to work.
# A better way is to add this file/pattern to black's 'exclude'
# in your pyproject.toml.

# --- End of Auto-generated Header ---
import pytest
from example_code.code import add




def test_add_two_positive_integers():
    actual_return = add(number_a=2, number_b=3)
    assert actual_return == 5

def test_add_a_positive_and_a_negative_integer():
    actual_return = add(number_a=5, number_b=-5)
    assert actual_return == 0

def test_add_two_negative_integers():
    actual_return = add(number_a=-3, number_b=-5)
    assert actual_return == -8

def test_add_zero_and_a_positive_integer():
    actual_return = add(number_a=0, number_b=7)
    assert actual_return == 7

def test_add_zero_and_zero():
    actual_return = add(number_a=0, number_b=0)
    assert actual_return == 0

def test_add_the_smallest_possible_integer_values_using_pythons_minimum_int_is_unbounded_but_test_with_large_negative_values():
    actual_return = add(number_a=-10000000000, number_b=-10000000000)
    assert actual_return == -20000000000

def test_add_the_largest_possible_integer_values_using_large_positive_values():
    actual_return = add(number_a=10000000000, number_b=10000000000)
    assert actual_return == 20000000000

def test_add_one_and_negative_one_to_get_zero():
    actual_return = add(number_a=1, number_b=-1)
    assert actual_return == 0

def test_pass_a_float_instead_of_an_integer_for_number_a():
    with pytest.raises(TypeError):
        add(number_a=1.5, number_b=2)

def test_pass_a_float_instead_of_an_integer_for_number_b():
    with pytest.raises(TypeError):
        add(number_a=2, number_b=3.7)

def test_pass_a_string_instead_of_an_integer_for_number_a():
    with pytest.raises(TypeError):
        add(number_a="2", number_b=3)

def test_pass_a_string_instead_of_an_integer_for_number_b():
    with pytest.raises(TypeError):
        add(number_a=2, number_b="3")

def test_pass_none_for_number_a():
    with pytest.raises(TypeError):
        add(number_a=None, number_b=3)

def test_pass_none_for_number_b():
    with pytest.raises(TypeError):
        add(number_a=3, number_b=None)

def test_pass_a_list_instead_of_an_integer_for_number_a():
    with pytest.raises(TypeError):
        add(number_a=[1], number_b=2)

def test_pass_a_dictionary_instead_of_an_integer_for_number_b():
    with pytest.raises(TypeError):
        add(number_a=2, number_b={"key": "value"})
